/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "./common";
import type {
  TestVotingToken,
  TestVotingTokenInterface,
} from "./TestVotingToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromDelegate",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toDelegate",
        type: "address",
      },
    ],
    name: "DelegateChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegate",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "previousBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newBalance",
        type: "uint256",
      },
    ],
    name: "DelegateVotesChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "delegateBySig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getPastTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getPastVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b1838038062001b1883398101604081905262000034916200017c565b6040518060400160405280600a8152602001692b37ba32902a37b5b2b760b11b8152506040518060400160405280600381526020016215951560ea1b81525081609c90816200008491906200023a565b50609d6200009382826200023a565b505050620000a83382620000af60201b60201c565b506200032e565b6001600160a01b0382166200010a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80609b60008282546200011e919062000306565b90915550506001600160a01b0382166000818152609960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b6000602082840312156200018f57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001c157607f821691505b602082108103620001e257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200017757600081815260208120601f850160051c81016020861015620002115750805b601f850160051c820191505b8181101562000232578281556001016200021d565b505050505050565b81516001600160401b0381111562000256576200025662000196565b6200026e81620002678454620001ac565b84620001e8565b602080601f831160018114620002a657600084156200028d5750858301515b600019600386901b1c1916600185901b17855562000232565b600085815260208120601f198616915b82811015620002d757888601518255948401946001909101908401620002b6565b5085821015620002f65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200032857634e487b7160e01b600052601160045260246000fd5b92915050565b6117da806200033e6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80635c19a95c116100ad5780639ab24eb0116100715780639ab24eb014610279578063a457c2d71461028c578063a9059cbb1461029f578063c3cda520146102b2578063dd62ed3e146102c557600080fd5b80635c19a95c1461020d57806370a08231146102225780637ecebe001461024b5780638e539e8c1461025e57806395d89b411461027157600080fd5b8063313ce567116100f4578063313ce5671461018c5780633644e5151461019b57806339509351146101a35780633a46b1a8146101b6578063587cde1e146101c957600080fd5b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016757806323b872dd14610179575b600080fd5b61012e6102d8565b60405161013b919061154f565b60405180910390f35b6101576101523660046115b9565b61036a565b604051901515815260200161013b565b609b545b60405190815260200161013b565b6101576101873660046115e3565b610384565b6040516012815260200161013b565b61016b6103a8565b6101576101b13660046115b9565b6103b7565b61016b6101c43660046115b9565b6103d9565b6101f56101d736600461161f565b6001600160a01b039081166000908152606760205260409020541690565b6040516001600160a01b03909116815260200161013b565b61022061021b36600461161f565b610402565b005b61016b61023036600461161f565b6001600160a01b031660009081526099602052604090205490565b61016b61025936600461161f565b610411565b61016b61026c36600461163a565b61042f565b61012e610490565b61016b61028736600461161f565b61049f565b61015761029a3660046115b9565b6104cf565b6101576102ad3660046115b9565b61054a565b6102206102c0366004611653565b610558565b61016b6102d33660046116b3565b610685565b6060609c80546102e7906116e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610313906116e6565b80156103605780601f1061033557610100808354040283529160200191610360565b820191906000526020600020905b81548152906001019060200180831161034357829003601f168201915b5050505050905090565b6000336103788185856106b0565b60019150505b92915050565b6000336103928582856107d4565b61039d85858561084e565b506001949350505050565b60006103b26109f9565b905090565b6000336103788185856103ca8383610685565b6103d49190611730565b6106b0565b6001600160a01b03821660009081526068602052604081206103fb9083610a74565b9392505050565b3361040d8183610b90565b5050565b6001600160a01b0381166000908152606a602052604081205461037e565b60004382106104855760405162461bcd60e51b815260206004820152601a60248201527f566f7465733a20626c6f636b206e6f7420796574206d696e656400000000000060448201526064015b60405180910390fd5b61037e606983610a74565b6060609d80546102e7906116e6565b6001600160a01b03811660009081526068602052604081206104c090610c07565b6001600160e01b031692915050565b600033816104dd8286610685565b90508381101561053d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161047c565b61039d82868684036106b0565b60003361037881858561084e565b834211156105a85760405162461bcd60e51b815260206004820152601860248201527f566f7465733a207369676e617475726520657870697265640000000000000000604482015260640161047c565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906106229061061a9060a00160405160208183030381529060405280519060200120610c41565b858585610c8f565b905061062d81610cb7565b86146106725760405162461bcd60e51b8152602060048201526014602482015273566f7465733a20696e76616c6964206e6f6e636560601b604482015260640161047c565b61067c8188610b90565b50505050505050565b6001600160a01b039182166000908152609a6020908152604080832093909416825291909152205490565b6001600160a01b0383166107125760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161047c565b6001600160a01b0382166107735760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161047c565b6001600160a01b038381166000818152609a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006107e08484610685565b90506000198114610848578181101561083b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161047c565b61084884848484036106b0565b50505050565b6001600160a01b0383166108b25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161047c565b6001600160a01b0382166109145760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161047c565b6001600160a01b0383166000908152609960205260409020548181101561098c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161047c565b6001600160a01b0380851660008181526099602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109ec9086815260200190565b60405180910390a3610848565b60006103b27f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610a2860335490565b6034546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6000438210610ac55760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e6564604482015260640161047c565b6000610ad083610cdf565b84549091506000816005811115610b2e576000610aec84610d48565b610af69085611743565b60008981526020902090915081015463ffffffff9081169086161015610b1e57809150610b2c565b610b29816001611730565b92505b505b6000610b3c88868585610e30565b90508015610b7857610b6188610b53600184611743565b600091825260209091200190565b5464010000000090046001600160e01b0316610b7b565b60005b6001600160e01b031698975050505050505050565b6001600160a01b0382811660008181526067602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610c028183610bfd86610e8e565b610eac565b505050565b80546000908015610c3857610c2183610b53600184611743565b5464010000000090046001600160e01b03166103fb565b60009392505050565b600061037e610c4e6109f9565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610ca087878787610fe9565b91509150610cad816110ad565b5095945050505050565b6001600160a01b0381166000908152606a602052604090208054600181018255905b50919050565b600063ffffffff821115610d445760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161047c565b5090565b600081600003610d5a57506000919050565b60006001610d67846111fa565b901c6001901b90506001818481610d8057610d80611756565b048201901c90506001818481610d9857610d98611756565b048201901c90506001818481610db057610db0611756565b048201901c90506001818481610dc857610dc8611756565b048201901c90506001818481610de057610de0611756565b048201901c90506001818481610df857610df8611756565b048201901c90506001818481610e1057610e10611756565b048201901c90506103fb81828581610e2a57610e2a611756565b0461128e565b60005b81831015610e86576000610e4784846112a4565b60008781526020902090915063ffffffff86169082015463ffffffff161115610e7257809250610e80565b610e7d816001611730565b93505b50610e33565b509392505050565b6001600160a01b03811660009081526099602052604081205461037e565b816001600160a01b0316836001600160a01b031614158015610ece5750600081115b15610c02576001600160a01b03831615610f5c576001600160a01b03831660009081526068602052604081208190610f09906112bf856112cb565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051610f51929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610c02576001600160a01b03821660009081526068602052604081208190610f9290611303856112cb565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051610fda929190918252602082015260400190565b60405180910390a25050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561102057506000905060036110a4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611074573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661109d576000600192509250506110a4565b9150600090505b94509492505050565b60008160048111156110c1576110c161176c565b036110c95750565b60018160048111156110dd576110dd61176c565b0361112a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161047c565b600281600481111561113e5761113e61176c565b0361118b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161047c565b600381600481111561119f5761119f61176c565b036111f75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161047c565b50565b600080608083901c1561120f57608092831c92015b604083901c1561122157604092831c92015b602083901c1561123357602092831c92015b601083901c1561124557601092831c92015b600883901c1561125757600892831c92015b600483901c1561126957600492831c92015b600283901c1561127b57600292831c92015b600183901c1561037e5760010192915050565b600081831061129d57816103fb565b5090919050565b60006112b36002848418611782565b6103fb90848416611730565b60006103fb8284611743565b6000806112f6856112f16112de88610c07565b6001600160e01b0316868863ffffffff16565b61130f565b915091505b935093915050565b60006103fb8284611730565b60008061132d8461131f43610cdf565b61132886611343565b6113ac565b6001600160e01b03918216969116945092505050565b60006001600160e01b03821115610d445760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161047c565b8254600090819080156114f55760006113ca87610b53600185611743565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b03166020840152919250908716101561144c5760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b6579000000000000000000604482015260640161047c565b805163ffffffff808816911603611495578461146d88610b53600186611743565b80546001600160e01b03929092166401000000000263ffffffff9092169190911790556114e5565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506112fb9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050816112fb565b600060208083528351808285015260005b8181101561157c57858101830151858201604001528201611560565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146115b457600080fd5b919050565b600080604083850312156115cc57600080fd5b6115d58361159d565b946020939093013593505050565b6000806000606084860312156115f857600080fd5b6116018461159d565b925061160f6020850161159d565b9150604084013590509250925092565b60006020828403121561163157600080fd5b6103fb8261159d565b60006020828403121561164c57600080fd5b5035919050565b60008060008060008060c0878903121561166c57600080fd5b6116758761159d565b95506020870135945060408701359350606087013560ff8116811461169957600080fd5b9598949750929560808101359460a0909101359350915050565b600080604083850312156116c657600080fd5b6116cf8361159d565b91506116dd6020840161159d565b90509250929050565b600181811c908216806116fa57607f821691505b602082108103610cd957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561037e5761037e61171a565b8181038181111561037e5761037e61171a565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60008261179f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ac3384f13027e13114d3504d72716a308274245175d82825ce854bc27db427fe64736f6c63430008110033";

type TestVotingTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestVotingTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestVotingToken__factory extends ContractFactory {
  constructor(...args: TestVotingTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestVotingToken> {
    return super.deploy(
      initialSupply,
      overrides || {}
    ) as Promise<TestVotingToken>;
  }
  override getDeployTransaction(
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialSupply, overrides || {});
  }
  override attach(address: string): TestVotingToken {
    return super.attach(address) as TestVotingToken;
  }
  override connect(signer: Signer): TestVotingToken__factory {
    return super.connect(signer) as TestVotingToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestVotingTokenInterface {
    return new utils.Interface(_abi) as TestVotingTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestVotingToken {
    return new Contract(address, _abi, signerOrProvider) as TestVotingToken;
  }
}
